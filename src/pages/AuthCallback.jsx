import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { setTokens } from '../utils/auth.js';

const AuthCallback = () => {
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();

    useEffect(() => {
        console.log('üîç URL hi·ªán t·∫°i:', window.location.href);
        console.log('üìç Pathname:', window.location.pathname);
        console.log('üîó Search:', window.location.search);
        console.log('üè∑Ô∏è Hash:', window.location.hash);

        // Ki·ªÉm tra xem c√≥ ph·∫£i callback URL kh√¥ng
        if (!window.location.pathname.includes('/auth/callback')) {
            console.log('‚è≠Ô∏è Kh√¥ng ph·∫£i callback URL, b·ªè qua...');
            setLoading(false);
            return;
        }

        // V·ªõi Implicit Grant, token s·∫Ω ·ªü URL fragment (#)
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        const urlParams = new URLSearchParams(window.location.search);

        const accessToken = hashParams.get('access_token');
        const state = hashParams.get('state') || urlParams.get('state');
        const errorParam = hashParams.get('error') || urlParams.get('error');
        const errorDesc = hashParams.get('error_description') || urlParams.get('error_description');

        console.log('üîë Access token t·ª´ URL:', accessToken ? 'C√≥' : 'Kh√¥ng c√≥');
        console.log('üéØ State:', state);

        if (errorParam) {
            console.error('‚ùå L·ªói t·ª´ Salesforce:', errorParam, errorDesc);
            setError(`${errorParam}: ${errorDesc}`);
            setLoading(false);
            return;
        }

        if (!accessToken) {
            console.error('‚ùå Kh√¥ng t√¨m th·∫•y access_token trong URL');
            setError('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c access token t·ª´ Salesforce. Vui l√≤ng th·ª≠ l·∫°i.');
            setLoading(false);
            return;
        }

        // Ki·ªÉm tra state ch·ªëng CSRF
        const localState = localStorage.getItem('oauth_state');
        if (state !== localState) {
            console.error('‚ùå State kh√¥ng kh·ªõp:', { state, localState });
            setError('M√£ state kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.');
            setLoading(false);
            return;
        }

        // L∆∞u token s·ª≠ d·ª•ng h√†m d√πng chung
        console.log('‚úÖ L∆∞u access token...');

        // L·∫•y th√™m th√¥ng tin t·ª´ URL fragment n·∫øu c√≥
        const instanceUrl = hashParams.get('instance_url');
        const refreshToken = hashParams.get('refresh_token');
        const scope = hashParams.get('scope');

        // S·ª≠ d·ª•ng h√†m setTokens ƒë·ªÉ l∆∞u th√¥ng tin
        const decodedInstanceUrl = instanceUrl ? decodeURIComponent(instanceUrl) : null;
        const expiresIn = 2 * 60 * 60; // 2 gi·ªù cho Implicit Grant

        setTokens(accessToken, decodedInstanceUrl, refreshToken, expiresIn);

        if (scope) {
            localStorage.setItem('salesforce_scope', decodeURIComponent(scope));
        }

        localStorage.removeItem('oauth_state'); // D·ªçn d·∫πp

        console.log('üéâ X√°c th·ª±c th√†nh c√¥ng v·ªõi Implicit Grant!');
        console.log('üìä Stored data:', {
            access_token: '‚úÖ Stored',
            instance_url: decodedInstanceUrl || '‚ùå None',
            refresh_token: refreshToken ? '‚úÖ Stored' : '‚ùå None'
        });

        setLoading(false);
        navigate('/');
    }, [navigate]);

    return (
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-100 via-purple-100 to-white px-4">
            <div className="max-w-md w-full bg-white/90 shadow-xl rounded-2xl px-8 py-10 flex flex-col items-center border border-gray-100">
                <h2 className="text-2xl font-bold mb-4 text-center">ƒêang x√°c th·ª±c v·ªõi Salesforce...</h2>
                {loading && <p className="text-blue-600">Vui l√≤ng ch·ªù...</p>}
                {error && <div className="text-red-600 text-center mt-4">{error}</div>}
            </div>
        </div>
    );
};

export default AuthCallback;
